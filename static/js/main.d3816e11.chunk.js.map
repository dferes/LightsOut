{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","flipCellsAroundMe","isLit","classes","className","onClick","Board","nrows","ncols","chanceLightStartsOn","useState","Array","from","length","Math","random","board","setBoard","every","val","idx","bool","map","row","y","x","oldBoard","flipCell","boardCopy","newBoard","cloneDeep","flipCellsAround","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAqBeA,MALf,YAA6C,IAA7BC,EAA4B,EAA5BA,kBAAmBC,EAAS,EAATA,MAC3BC,EAAO,eAAWD,EAAQ,WAAa,IAC7C,OAAO,wBAAIE,UAAWD,EAASE,QAASJ,KC2E3BK,G,OA/DD,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,MAAqC,IAA9BC,2BAA8B,MAAV,GAAU,EAU3D,EAA0BC,mBANLC,MAAMC,KAAM,CAAEC,OAAQN,IAAS,kBAChDI,MAAMC,KAAK,CAAEC,OAAQL,IAAS,kBAAMM,KAAKC,UAAYN,SAKzD,mBAAOO,EAAP,KAAcC,EAAd,KA8BA,OA1BSD,EAAME,OAAO,SAACC,EAAKC,GAAN,OAAc,IAASJ,EAAMI,GAAKF,OAAO,SAAAG,GAAI,OAAa,IAATA,QA4BnE,6BACE,iDAKJ,2BAAOjB,UAAU,aACdY,EAAMM,KAAK,SAACC,EAAKC,GAAN,OACV,4BACGD,EAAID,KAAK,SAACpB,EAAOuB,GAAR,OACR,kBAAC,EAAD,CACExB,kBAAmB,kBAnCP,SAACuB,EAAGC,GAC1BR,GAAS,SAAAS,GACP,IAAMC,EAAW,SAACH,EAAGC,EAAGG,GAClBH,GAAK,GAAKA,EAAIjB,GAASgB,GAAK,GAAKA,EAAIjB,IACvCqB,EAAUJ,GAAGC,IAAMG,EAAUJ,GAAGC,KAKhCI,EAAWC,EAAUJ,GASzB,OAPAC,EAASH,EAAGC,EAAGI,GACfF,EAASH,EAAGC,EAAE,EAAGI,GACjBF,EAASH,EAAGC,EAAE,EAAGI,GACjBF,EAASH,EAAE,EAAGC,EAAGI,GACjBF,EAASH,EAAE,EAAGC,EAAGI,GAGVA,KAiB0BE,CAAgBP,EAAEC,IAC3CvB,MAAOA,c,OCpEN8B,MAVf,WACE,OACE,yBAAK5B,UAAU,OACb,2CACA,6BACA,kBAAC,EAAD,CAAOG,MAAO,EAAGC,MAAO,EAAGC,oBAAqB,OCClCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d3816e11.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Cell.css\";\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nfunction Cell({ flipCellsAroundMe, isLit }) {\n  const classes = `Cell ${isLit ? \"Cell-lit\" : \"\"}`;\n  return <td className={classes} onClick={flipCellsAroundMe} />;\n}\n\nexport default Cell;\n","import React, { useState } from \"react\";\nimport * as cloneDeep from  'lodash/cloneDeep';\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       0  0  0\n *       1  1  0     (where 0 is off, and 1 is on)\n *       0  0  0\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nconst Board = ({ nrows, ncols, chanceLightStartsOn=0.50}) => {\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  const createBoard = () => {\n    let initialBoard = Array.from( { length: nrows }, () => ( \n      Array.from({ length: ncols }, () => Math.random() <= chanceLightStartsOn ? true: false)\n    ));\n\n    return initialBoard;\n  }\n  const [board, setBoard] = useState(createBoard());\n\n  // Returns true if every column of every row is set to true\n  const hasWon = () => {\n    return board.every( (val, idx) => true === board[idx].every( bool => bool === true ) );\n  }\n\n  // flips every cell in contact with the specified coordinate\n  const flipCellsAround = (y, x) => {\n    setBoard(oldBoard => {\n      const flipCell = (y, x, boardCopy) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n\n      let newBoard = cloneDeep(oldBoard);\n\n      flipCell(y, x, newBoard);\n      flipCell(y, x-1, newBoard);\n      flipCell(y, x+1, newBoard);\n      flipCell(y-1, x, newBoard);\n      flipCell(y+1, x, newBoard);\n\n      // TODO: return the copy\n      return newBoard\n    });\n  }\n\n  if (hasWon()) {\n    return (\n      <div>\n        <h1>Congradulations!</h1>\n      </div>\n    )\n  }\n  return (\n    <table className='gameBoard'>\n      {board.map( (row, y) => (\n        <tr>\n          {row.map( (isLit, x) => (\n            <Cell \n              flipCellsAroundMe={() => flipCellsAround(y,x)}\n              isLit={isLit}\n            />\n          ))}  \n        </tr>\n      ))}\n    </table>\n  )\n}\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Lights Out!</h1>\n      <hr/>\n      <Board nrows={5} ncols={5} chanceLightStartsOn={0.50}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}